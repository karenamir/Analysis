import java.util.*;

public class Graph {
    private Map<Integer, List<Integer>> adjList;
    private boolean[] visited;
    private boolean[] done;
    private List<List<Integer>> cycles;

    public Graph(int vertices) {
        this.adjList = new HashMap<>();
        for (int v = 1; v <= vertices; v++) {
            adjList.put(v, new LinkedList<>());
        }
        this.visited = new boolean[vertices + 1];
        this.done = new boolean[vertices + 1];
        this.cycles = new LinkedList<>();
    }

    public void addEdge(int from, int to) {
        adjList.get(from).add(to);
    }

    public List<Integer> bfs(int start) {
        List<Integer> order = new ArrayList<>();
        Queue<Integer> queue = new LinkedList<>();
        queue.add(start);
        visited[start] = true;
        while (!queue.isEmpty()) {
            int v = queue.remove();
            order.add(v);
            for (int w : adjList.get(v)) {
                if (!visited[w]) {
                    visited[w] = true;
                    queue.add(w);
                }
            }
        }
        Arrays.fill(visited, false); // Reset visited for the next call
        return order;
    }

    public List<Integer> dfs(int start) {
        List<Integer> order = new ArrayList<>();
        dfsHelper(start, order);
        Arrays.fill(visited, false); // Reset visited for the next call
        return order;
    }

    private void dfsHelper(int v, List<Integer> order) {
        visited[v] = true;
        order.add(v);
        for (int w : adjList.get(v)) {
            if (!visited[w]) {
                dfsHelper(w, order);
            }
        }
    }

    public boolean isBipartite() {
        int[] color = new int[adjList.size() + 1];
        Arrays.fill(color, -1);
        for (int v = 1; v <= adjList.size(); v++) {
            if (color[v] == -1) {
                if (!isBipartiteHelper(v, color)) {
                    return false;
                }
            }
        }
        return true;
    }

    private boolean isBipartiteHelper(int v, int[] color) {
        if (color[v] == -1) {
            color[v] = 1;
        }
        for (int w : adjList.get(v)) {
            if (color[w] == -1) {
                color[w] = 1 - color[v];
                if (!isBipartiteHelper(w, color)) {
                    return false;
                }
            } else if (color[w] == color[v]) {
                return false;
            }
        }
        return true;
    }

    public boolean containCycles() {
        cycles.clear(); // Clear any previously found cycles
        for (int i = 1; i < adjList.size() + 1; i++) {
            if (!done[i]) {
                ArrayList<Integer> curr = new ArrayList<>();
                curr.add(i);
                cycleHelper(i, i, new boolean[adjList.size() + 1], curr);
                done[i] = true;
            }
        }
        return !cycles.isEmpty();
    }

    private void cycleHelper(int node, int parent, boolean[] seen, ArrayList<Integer> path) {
        seen[node] = true;
        for (int child : adjList.get(node)) {
            if (child == parent && path.size() > 1) {
                path.add(parent);
                cycles.add(new ArrayList<>(path));
                path.remove(path.size() - 1);
            } else if (!seen[child] && !done[child]) {
                path.add(child);
                cycleHelper(child, parent, seen.clone(), path);
                path.remove(path.size() - 1);
            }
        }
    }

   
public List<List<Integer>> getCycles() {
containCycles();
return cycles;
}

public static void main(String[] args) {
    Graph graph = new Graph(4);
    graph.addEdge(1, 3);
    graph.addEdge(1, 4);
    graph.addEdge(2, 1);
    graph.addEdge(2, 3);
    graph.addEdge(3, 4);
    graph.addEdge(4, 1);
    graph.addEdge(4, 2);

    // Perform BFS and DFS
    List<Integer> bfsOrder = graph.bfs(1);
    List<Integer> dfsOrder = graph.dfs(1);

    // Check if the graph is bipartite
    boolean isBipartite = graph.isBipartite();

    // Get all cycles
    List<List<Integer>> foundCycles = graph.getCycles();

    // Output the results
    System.out.println("BFS order starting from node 1: " + bfsOrder);
    System.out.println("DFS order starting from node 1: " + dfsOrder);
    System.out.println("Is the graph bipartite? " + isBipartite);
    System.out.println("Cycles found: " + foundCycles);
}
}
